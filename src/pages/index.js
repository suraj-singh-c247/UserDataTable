import Head from "next/head";
import { Geist, Geist_Mono } from "next/font/google";
import { Box, Container, Paper, Typography } from "@mui/material";
// user utils
import { data } from "@/utils/data.js";
import { userColumns } from "@/utils/column.js";
import Search from "@/components/Search";
import {
  getUserDataFromStorage,
  setUserDataToStorage,
} from "@/utils/localStorageData";
// react hooks
import { useEffect, useState } from "react";
import { useRouter } from "next/router";

// custom modal
import AddEditModal from "@/components/modal/AddEditModal";
import DataTable from "@/components/DataTable";
import CustomButton from "@/components/CustomButton";

// Icons
import AddIcon from "@mui/icons-material/Add";
// this for styles
import styles from "@/styles/Home.module.css";
import btnStyles from "@/styles/Button.module.css";
import searchStyles from "@/styles/Search.module.css";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function Home() {
  const router = useRouter();
  const { search = "", page = "1", rowPerPage = "10" } = router.query;
  //state
  const [addOpen, setAddOpen] = useState(false);
  const [userData, setUserData] = useState(data);
  const [searchText, setSearchText] = useState("");
  const [customPage, setCustomPage] = useState(Number(page) - 1);
  const [customRowsPerPage, setCustomRowsPerPage] = useState(
    Number(rowPerPage)
  );

  // useEffect to initialize user data from local storage or default data
  // and set it to state
  
  useEffect(() => {  
    const storedData = getUserDataFromStorage();
    if (storedData && storedData.length > 0) {
      setUserData(storedData);
    } else {
      setUserData(data);
      setUserDataToStorage(data);
    }
  }, [router.isReady]);
  
  useEffect(() => {
    const storedData = getUserDataFromStorage();
    if (!search && !search.trim() === "") {
      setUserData(storedData);
      setSearchText("");
      return;
    }
    const filteredData = storedData.filter((user) => {
      return (
        user.name
          .toLocaleLowerCase()
          .includes(search.toLocaleLowerCase()) ||
        user.email
          .toLocaleLowerCase()
          .includes(search.toLocaleLowerCase()) ||
        user.role
          .toLocaleLowerCase()
          .includes(search.toLocaleLowerCase()) ||
        user.phoneNumber
          .toLocaleLowerCase()
          .includes(search.toLocaleLowerCase()) ||
        user.status.toLocaleLowerCase().includes(search.toLocaleLowerCase())
      );
    });    
    
    setUserData(filteredData);
    setSearchText(search);
  }, [search]);


  // useEffect for pagination
  useEffect(() => {
    setCustomPage(Number(customPage));
    setCustomRowsPerPage(Number(customRowsPerPage));
  }, [customPage, customRowsPerPage]);

  // Function to handle search input
  const handleSearch = (searchTerm) => {
    if (searchTerm.length > 3) {
      setSearchText(searchTerm);
    }
    router.push({
      pathname: router.pathname,
      query: { search: searchTerm },
    });
  };
  // Function to clear search input and reset user data
  const handleClear = () => {
    setSearchText("");
    router.push({
      pathname: router.pathname,
      query: {},
    });
    const storedData = getUserDataFromStorage();
    setUserData(storedData);
  };

  // Function to handle page change
  const handlePageChange = (event, newPage) => {
    setCustomPage(newPage);
    router.push({
      pathname: router.pathname,
      query: {
        ...router.query,
        page: customPage + 1,
        rowPerPage: customRowsPerPage,
      },
    });
  };

  const handleRowPerPageChange = (event) => {
    const newRowPerPage = parseInt(event.target.value, 10);
    setCustomRowsPerPage(newRowPerPage);
    setCustomPage(1);
    router.push({
      pathname: router.pathname,
      query: { ...router.query, page: 1, rowPerPage: newRowPerPage },
    });
  };

  return (
    <>
      <Head>
        <title>Data Table Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box className={`${geistSans.variable} ${geistMono.variable}`}>
        <main className={styles.main}>
          <Container maxWidth="xl" className={styles.container}>
            <Paper className={styles.paper}>
              <Typography variant="h4" className={styles.title}>
                Welcome to the Data Table App
              </Typography>
              
              <Box className={searchStyles.searchContainer}>
                <Search
                  type={"text"}
                  searchTerm={searchText}
                  setSearchTerm={setSearchText}
                  handleSearch={handleSearch}
                  handleClear={handleClear}
                />
              <Box className={btnStyles.buttonContainer}>
                <CustomButton
                  variant="contained"
                  label="Add User"
                  startIcon={<AddIcon />}
                  onClick={() => setAddOpen(true)}
                />
              </Box>
              </Box>
              <DataTable
                page={customPage}
                rowsPerPage={customRowsPerPage}
                count={userData.length}
                userData={userData.slice(
                  customPage * customRowsPerPage,
                  customPage * customRowsPerPage + customRowsPerPage
                )}
                onPageChange={handlePageChange}
                onRowChange={handleRowPerPageChange}
                columns={userColumns}
              />
            </Paper>
          </Container>
        </main>
      </Box>
      {/* This modal for add user */}
      <AddEditModal
        open={addOpen}
        userData={userData}
        setUserData={setUserData}
        onClose={() => {
          setAddOpen(false);
        }}
        title={"Add User Details"}
      />
      
    </>
  );
}
